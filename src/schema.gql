# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  """
  The ID of the user
  """
  id: MongoObjectId!

  """
  The first name of the user
  """
  firstName: String!

  """
  The last name of the user
  """
  lastName: String!

  """
  The headline of the user
  """
  headline: String!

  """
  The profile picture of the user
  """
  avatar: String

  """
  The email of the user
  """
  email: String!

  """
  The role of the user
  """
  role: String!

  """
  The posts that the user has saved them
  """
  bookmarks: [MongoObjectId!]!
  posts(options: PaginationOptions): [Post!]
}

"""
The `ObjectId` type of Mongo database documents `_id` field
"""
scalar MongoObjectId

input PaginationOptions {
  page: Int
  pageSize: Int
}

type VoteType implements VoteInterface {
  totalVotes: Int!
  voters: [MongoObjectId!]!
}

interface VoteInterface {
  totalVotes: Int!
  voters: [MongoObjectId!]!
}

type PostThumbnail implements PostThumbnailInterface {
  id: String!
  src: String!
}

interface PostThumbnailInterface {
  id: String!
  src: String!
}

type PostResource implements PostThumbnailInterface {
  id: String!
  src: String!
  title: String!
  type: String!
  link: String!
}

type Post {
  """
  The ID of the post
  """
  id: MongoObjectId!

  """
  The title of the post
  """
  title: String!

  """
  The thumbnail of the post
  """
  thumbnail: PostThumbnail

  """
  The body or the content of the post
  """
  body: String!

  """
  The ID of post's author
  """
  authorId: MongoObjectId!

  """
  The category of the post
  """
  category: String!
  tags: [String!]!
  upvotes: Int!
  downvotes: Int!
  resources: [PostResource!]!
  publishedAt: Timestamp!
  commentsCount: Int!
  author: User
  userVote: String
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type UserBookmarksPaginationResponse {
  areThereMorePosts: Boolean!
  posts: [Post!]!
}

type JWT {
  accessToken: String!
}

type CommentOwner {
  firstName: String!
  lastName: String!
  headline: String!
  avatar: String
}

type PostComment {
  id: MongoObjectId!
  commenterId: MongoObjectId!
  comment: String!
  createdAt: Timestamp
  owner: CommentOwner!
  upvotes: Int!
  downvotes: Int!
}

type PostCommentsPaginationResponse {
  areThereMore: Boolean!
  comments: [PostComment!]!
}

type Query {
  userData: User
  user(userId: MongoObjectId!): User
  users(searchQuery: SearchForUserInput!, options: PaginationOptions): [User!]!
  getUserBookmarks(
    paginationOptions: PaginationOptions = { page: 1, pageSize: 5 }
  ): UserBookmarksPaginationResponse!
  posts(searchQuery: SearchForPostInput!, options: PaginationOptions): [Post!]!
  post(postId: MongoObjectId!): Post
  userFeeds: [Post!]!
  getPostComments(
    postId: MongoObjectId!
    paginationOptions: PaginationOptions!
  ): PostCommentsPaginationResponse!
}

input SearchForUserInput {
  id: MongoObjectId
  email: String
  firstName: String
  lastName: String
}

input SearchForPostInput {
  id: MongoObjectId
  authorId: MongoObjectId
  title: String
}

type Mutation {
  updateUserData(updateUserDataInput: UpdateUserDataInput!): Boolean!
  publishPost(createPostInput: CreatePostInput!): Boolean!
  editPost(editPostInput: EditPostInput!): Boolean!
  deletePost(postId: MongoObjectId!): Boolean!
  upvotePost(postId: MongoObjectId!): Boolean!
  downvotePost(postId: MongoObjectId!): Boolean!
  bookmarkPost(postId: MongoObjectId!): Boolean!
  logInUser(logInUserInput: LogInUserInput!): JWT
  signUpUser(signUpUserInput: SignUpUserInput!): JWT
  addCommentToPost(postId: MongoObjectId!, comment: String!): String!
  removeCommentFromPost(
    postId: MongoObjectId!
    commentId: MongoObjectId!
  ): Boolean!
  votePostComment(
    postId: MongoObjectId!
    commentId: MongoObjectId!
    voteType: String!
  ): Boolean!
}

input UpdateUserDataInput {
  firstName: String
  lastName: String
  headline: String
  avatar: String
}

input CreatePostInput {
  title: String!
  body: String!
  category: String!
  thumbnail: CreatePostThumbnail
  tags: [String!]
  resources: [CreatePostPostResource!]!
}

input CreatePostThumbnail {
  id: String!
  src: String!
}

input CreatePostPostResource {
  title: String!
  type: String!
  link: String!
}

input EditPostInput {
  postId: MongoObjectId!
  editOptions: EditPostOptions!
}

input EditPostOptions {
  title: String
  body: String
  thumbnail: EditPostThumbnail
  category: String
  tags: EditTagsOptions
  resources: UpdateResourcesOptions
}

input EditPostThumbnail {
  id: String!
  src: String!
}

input EditTagsOptions {
  newTags: [String!]
  removedTags: [String!]
}

input UpdateResourcesOptions {
  newResources: [CreatePostPostResource!]
  removedResources: [MongoObjectId!]
  updatedResources: [UpdateResource!]
}

input UpdateResource {
  _id: MongoObjectId!
  title: String
  link: String
  type: String
}

input LogInUserInput {
  email: String!
  password: String!
}

input SignUpUserInput {
  """
  The firs name of the user
  """
  firstName: String!

  """
  The last name of the user
  """
  lastName: String!

  """
  The headline of the user
  """
  headline: String!

  """
  The email of the user
  """
  email: String!

  """
  The password of the user
  """
  password: String!
}
